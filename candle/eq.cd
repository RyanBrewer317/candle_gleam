let subst{A: Type}{a: A}{b: A}(eq: a = b){P: <y: A>=><(a = y)>=>Type}
  : P<a><refl(a)> => P<b><eq>
  := Psi(eq, P) in

let J
  {A: Type}
  {x: A}
  {y: A}
  (eq: x = y)
  {P: <x: A>=> <y: A>=> <eq: x = y>=> Type}
  (w: {i: A}=> P<i><i><refl(i)>)
  : P<x><y><eq>
  := subst{A}{x}{y}(eq){<y>-> <eq>-> P<x><y><eq>}(w{x}) in

let leibniz{A: Type}{P: <A>=>Type}{x: A}{y: A}(p: P<x>)(eq: x = y): P<y>
  := J{A}{x}{y}(eq){<x>-> <y>-> <eq>-> P<x> => P<y>}({i}-> p->p)(p) in

let theta_phi{A: Type}{B: <A>=>Type}{a: (x: A) & B<x>}
  : cast(a.1, a, refl(a.1)) = a
  := refl(a) in

let theta1
  {A: Type}
  {B: <A>=>Type}
  (x: (a: A) & B<a>)
  (y: (a: A) & B<a>)
  (eq: y.1 = x.1)
  : x = y
  := leibniz
    {(a: A) & B<a>}
    {<z>-> z = y}
    {x}
    {y}
    (leibniz
      {A}
      {<z>-> 
        {eq: z = x.1}=> cast(z, x, eq) = y
      }
      {y.1}
      {x.1}
      ({i}-> refl(y))
      (eq)
      {refl(x.1)}
    )
    (theta_phi{A}{B}{x}) 
in

2